#!/bin/sh

namespace=exam
prefix=alx

project_path=/var/www/html
migrations_path=database/migrations

get_podname() {
    kubectl get pods -n $namespace --selector=release=$prefix-backend \
        | grep "^$prefix-backend" | grep Running | head -n 2 | tail -n 1 \
        | awk '{ print $1 }'
}

kube_exec() { kubectl exec -ti svc/$prefix-backend -n $namespace -- "$@"; }

kube_cp() {
    echo "kube cp\nfrom: $1\nto:   $2\n"
    kubectl cp -n $namespace "$1" "$2"
}

getlastmig() { kube_exec ls "$project_path/$migrations_path" | tail -n 1; }

dlfile() {
    echo "Downloading file $1"
    kube_cp "$(get_podname):$project_path/$1" "$(pwd)/$1"
}

dllastmig() { dlfile "$migrations_path/$(getlastmig)"; }

#
# subcommands
#

listpods() {
    kubectl get pods -n $namespace | grep $prefix
}

artisan() { kube_exec php artisan "$@"; }

migst() { artisan migrate:status; }

migup() { artisan migrate; }

migdn() {
    step=${1:-1}
    artisan migrate:rollback --step $step
}

makemig() {
    artisan make:migration $1
    # dllastmig
    ./backend download -p $migrations_path
}

subcmd="$1"
shift
case $subcmd in
    prefix) echo $prefix;;
    namespace) echo $namespace;;
    lspods) listpods;;
    podname) get_podname;;
    exec) kube_exec "$@";;
    bash) kube_exec bash;;
    artisan) artisan "$@";;
    migst) migst;;
    migup) migup;;
    migdn) migdn;;
    makemig) makemig "$1";;
    *) echo "Invalid subcommand $subcmd" && exit 1;;
esac

